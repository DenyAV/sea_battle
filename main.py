import random


class Deck:
    '''
    Класс описывает клетку, занимаемую кораблем - палубу

    Свойства
    -----------
    row : int
        Номер строки, на которой находится палуба

    col : int
        Номер колонки, на которой находится палуба

    hit : bool
        Подбита ли палуба. Истина, если подбита

    Методы
    -----------

    '''

    pass


class Ship:
    '''
    Класс используется для представления корабля

    Свойства
    -----------
    decks : []
        Список объектов Deck, т.е. список палуб корабля

    Методы
    -----------

    Статические методы
    -----------
    create_ship(decks_num, players_field)
        Создает новый корабль с заданным количеством палуб на игровом поле

        Параметры:

        decks_num : int
            Количество палуб корабля (сколько клеток корабль занимает на поле)
        players_field : object Field
            Игровое поле, на котором будет размещаться корабль.
            Создавать корабль отдельно от игрового поля бессмысленно, поскольку
            на поле могут быть другие корабли и при создании корабля нужно проверять,
            не пересекается ли он с другими кораблями на поле

    '''

    @staticmethod
    def create_ship(decks_num, players_field):
        pass


class Field:
    '''
    Класс используется для представления игрового поля

    Свойства
    -----------
    ships : []
        Содержит список кораблей, расположенных на игровом поле

    Методы
    -----------
    show()
        Выводит в консоль заполненное игровое поле, в котором:
        ' ' - пустое поле
        * - клетка, заполненная кораблем
        Х - подбитый корабль
        Т - промах

    Статические методы
    -----------
    create_field()
        Мастер создания игрового поля и заполнения его кораблями

        Последовательно предлагает пользователю создать корабли:
        1 трехпалубный корабль;
        2 двухпалубных корабля;
        3 трехпалубных корабля

        Затем создает объект класса Field и заполняет его созданными кораблями
    '''

    def __init__(self, ships):
        self.__ships = ships

    @property
    def ships(self):
        return self.__ships

    @ships.setter
    def set_ships(self, value):
        self.__ships = value

    def show(self):
        field_size = [[" "] * 6 for i in range(6)]

        field_size[1][1] = '*'

        print()
        print("    | 1 | 2 | 3 | 4 | 5 | 6 |")
        print("  --------------------------- ")
        for i, row in enumerate(field_size):
            row_str = f"  {i + 1} | {' | '.join(row)} | "
            print(row_str)
            print("  --------------------------- ")
        print()

    @staticmethod
    def create_field():
        ships_list = []
        print('Введите трехпалубный корабль')


if __name__ == '__main__':
    human_field = Field('11')
    human_field.show()

    print(human_field.ships)
